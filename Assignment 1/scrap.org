

** N = 10000, M = 100, Threads = 5
   The trends in the previous execution are continued when increasing $N$
   to $10000$. The for directive makes significant gains over the serial code
   while the parallel directive likely suffers from overhead. Note that $M$
   has been set to $100$ for this run, to compare against $1000$ in the next. \\

\begin{tabular}{c c}
Algorithm  &     Time (ms) \\ \hline
init-base  &     852.0000 \\
init-1     &     801.0001 \\
init-2     &     814.9998 \\
init-3     &     3341.0001 \\
max-base   &     286.0000 \\
max-1      &     370.0001 \\
max-2      &     61.9998 \\
max-3      &     62.0000 \\
hist-1     &     419.9998 \\
hist-2     &     118.0000 \\
hist-3     &     137.0001 \\
\end{tabular}

** N = 10000, M = 1000, Threads = 5
   As suggested earlier, this run shows that $M$ has no effect on the runtime
   of the algorithms; all runtimes are within standard variance for runtimes. \\

\begin{tabular}{c c}
Algorithm &       Time (ms) \\ \hline
init-base &       829.9999 \\
init-1    &       727.0000 \\
init-2    &       740.0000 \\
init-3    &       3319.0000 \\
max-base  &       272.0001 \\
max-1     &       368.0000 \\
max-2     &       62.0000 \\
max-3     &       62.0000 \\
hist-1    &       418.9999 \\
hist-2    &       120.0001 \\
hist-3    &       138.9999 \\
\end{tabular}

** N = 10000, M = 1000, Threads = 8 
   Increasing the number of threads to $8$ dramatically improves runtime for the
   parallel code, lowering the effect of overhead on the parallel directive
   algorithms and continuing speed increases with the for directive algorithms. \\

\begin{tabular}{c c}
Algorithm &       Time (ms) \\ \hline
init-base &       846.0000 \\
init-1    &       661.0000 \\
init-2    &       676.0001 \\
init-3    &       2577.9998 \\
max-base  &       282.0001 \\
max-1     &       318.0001 \\
max-2     &       73.0000 \\
max-3     &       53.0000 \\
hist-1    &       350.0001 \\
hist-2    &       110.9998 \\
hist-3    &       128.0000 \\
\end{tabular}

** N = 10000, M = 1000, Threads = 5 (static, 4)
   Setting $N = 10000$ and $M = 1000$ with $5$ threads, static scheduling with
   chunks of size $4$ was tested. This showed a mild decrease in speed for
   algorithms using the for directive, but no significant changes. The largest
   change, by a substantial margin, is in the init\_3 function, which drops
   in runtime significantly when it is run with static scheduling. This drop
   will carry on with the subsequent chunk sizes. \\

\begin{tabular}{c c}
Algorithm &      Time (ms) \\ \hline
init-base &       839.0000 \\
init-1    &       665.9999 \\
init-2    &       662.0002 \\
init-3    &       763.9999 \\
max-base  &       270.9999 \\
max-1     &       344.0001 \\
max-2     &       63.0000 \\
max-3     &       66.9999 \\
hist-1    &       425.0000 \\
hist-2    &       119.9999 \\
hist-3    &       149.0002 \\
\end{tabular}

** N = 10000, M = 1000, Threads = 5 (static, 64)
   Setting the chunk size to $64$ did not appear to have a significant effect
   on runtime, and all algorithms run within standard variance. \\

\begin{tabular}{c c}
Algorithm &      Time (ms) \\ \hline
init-base &      832.9999 \\
init-1    &      757.0002 \\
init-2    &      757.9999 \\
init-3    &      857.0001 \\
max-base  &      284.9998 \\
max-1     &      372.0000 \\
max-2     &      67.0002 \\
max-3     &      64.9998 \\
hist-1    &      446.0001 \\
hist-2    &      125.9999 \\
hist-3    &      148.0000 \\
\end{tabular}

** N = 10000, M = 1000, Threads = 5 (static, 128)
   Increasing the chunk size to $128$ appeared to have a slight improvement for
   the maximizing algorithms using the for directive, but no other changes. These
   changes are within variance, and are likely the result of statistical noise. \\

\begin{tabular}{c c}
Algorithm &      Time (ms) \\ \hline
init-base &       839.9999 \\
init-1    &       657.0001 \\
init-2    &       664.0000 \\
init-3    &       679.9998 \\
max-base  &       302.0000 \\
max-1     &       364.0001 \\
max-2     &       66.0000 \\
max-3     &       66.0000 \\
hist-1    &       444.9999 \\
hist-2    &       119.9999 \\
hist-3    &       149.0002 \\
\end{tabular}
