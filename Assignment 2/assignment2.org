#+TITLE: Assignment 2: Pthreads
#+AUTHOR: Evan Bradley
#+DATE: 2018-03-07
#+STARTUP: overview

* Pthread barrier code for macOS
Sourced from: http://blog.albertarmea.com/post/47089939939/using-pthreadbarrier-on-mac-os-x
#+BEGIN_SRC c :tangle barriers.h
  #ifdef __APPLE__

  #ifndef PTHREAD_BARRIER_H_
  #define PTHREAD_BARRIER_H_

  #include <pthread.h>
  #include <errno.h>

  typedef int pthread_barrierattr_t;
  typedef struct
  {
      pthread_mutex_t mutex;
      pthread_cond_t cond;
      int count;
      int tripCount;
  } pthread_barrier_t;


  int pthread_barrier_init(pthread_barrier_t *barrier, const pthread_barrierattr_t *attr, unsigned int count)
  {
      if(count == 0)
      {
          errno = EINVAL;
          return -1;
      }
      if(pthread_mutex_init(&barrier->mutex, 0) < 0)
      {
          return -1;
      }
      if(pthread_cond_init(&barrier->cond, 0) < 0)
      {
          pthread_mutex_destroy(&barrier->mutex);
          return -1;
      }
      barrier->tripCount = count;
      barrier->count = 0;

      return 0;
  }

  int pthread_barrier_destroy(pthread_barrier_t *barrier)
  {
      pthread_cond_destroy(&barrier->cond);
      pthread_mutex_destroy(&barrier->mutex);
      return 0;
  }

  int pthread_barrier_wait(pthread_barrier_t *barrier)
  {
      pthread_mutex_lock(&barrier->mutex);
      ++(barrier->count);
      if(barrier->count >= barrier->tripCount)
      {
          barrier->count = 0;
          pthread_cond_broadcast(&barrier->cond);
          pthread_mutex_unlock(&barrier->mutex);
          return 1;
      }
      else
      {
          pthread_cond_wait(&barrier->cond, &(barrier->mutex));
          pthread_mutex_unlock(&barrier->mutex);
          return 0;
      }
  }

  #endif // PTHREAD_BARRIER_H_
  #endif // __APPLE__
#+END_SRC
* Hash table with standard locks
The basic setup for the hash table implementation was taken from
=https://gist.github.com/tonious/1377667=, after a careful review of open-source
hash table implementations. The basis for this code is used in =hash.h=, which
adapts the code to be multithreaded using pthreads.

** Setup
The =node= struct consists of a key-value pair and a pointer to another node,
constituting a linked list in the case of a collision. A hash table is defined
as a struct containing a size and a pointer to an array. Both of these are given
their own types for easier use.
#+BEGIN_SRC c :tangle assignment2.h
  #include <stdlib.h>
  #include <limits.h>
  #include <string.h>
  #include <pthread.h>

  #include <execinfo.h>
  #include <signal.h>
  #include <stdlib.h>
  #include <stdint.h>

  #define MAX_MUTEXES 100

  #define MAX_THREADS 4
  #define MUTEX_COUNTS 4
  #define RWLOCK_COUNTS 4
  #define NUM_BOARDS 100000
  #define HT_LEN 1000000

  struct node_s {
    uint8_t key[4][4];
    uint8_t pos[2];
    unsigned value;
    struct node_s *next;
  };

  typedef struct node_s node_t;

  struct hashtable_s {
    unsigned int size;
    unsigned int bins;
    pthread_mutex_t **locks;
    node_t **table;
  };

  typedef struct hashtable_s hashtable_t;

  struct kv_s {
    char **keys;
    char **values;
  };

  typedef struct kv_s kv_t;

  /*struct ht_arg_s {
    hashtable_t *hashtable;
    kv_t *input;
    unsigned input_len;
    kv_t *output;
    unsigned output_len;
    unsigned threads;
    void (*cb)(void*, int, void*);
    unsigned count;
    pthread_mutex_t count_mut;
    pthread_barrier_t barrier;
  };*/

  struct ht_arg_s {
    hashtable_t *table;
    node_t *kv_pairs;
    unsigned start;
    unsigned end;
    pthread_barrier_t *barrier;
  };

  typedef struct ht_arg_s ht_arg_t;

  /*typedef struct {
    kv_t *kv;

    } work_queue;*/

  pthread_mutex_t mutexes[MAX_MUTEXES];
  pthread_rwlock_t rwlocks[MAX_MUTEXES];

  #include "heap.h"
#+END_SRC

** Key-value pairs creation
To test the hash table, a series of key-value pairs are created to test the hash
table.
#+BEGIN_SRC c :tangle hash.h
  char *rand_string(char *str, size_t size) {
    const char charset[] = "abcdefghijklmnopqrstuvwxyz";
    if (size) {
      --size;
      for (size_t n = 0; n < size; n++) {
        int key = rand() % (int) (sizeof charset - 1);
        str[n] = charset[key];
      }
      str[size] = '\0';
    }
    return str;
  }

  void init_kv(kv_t *key_val, unsigned len, unsigned num) {
    if((key_val->keys = malloc(sizeof(char*) * num)) == NULL) {
      return;
    }

    if((key_val->values = malloc(sizeof(char*) * num)) == NULL) {
      return;
    }

    for (unsigned i = 0; i < num; i++) {
      char *key = malloc(sizeof(char) * len);
      char *value = malloc(sizeof(char) * len);
      key_val->keys[i] = rand_string(key, len);
      key_val->values[i] = rand_string(value, len);
    }
  }
#+END_SRC
** Hash table creation
Hash table creation involves allocating heap space for the hash table struct and
each node in the array.
#+BEGIN_SRC c :tangle hash.h
  /* Create a new hashtable. */
  hashtable_t *ht_create( unsigned int size, unsigned int bins ) {

    hashtable_t *hashtable = NULL;
    unsigned int i;

    if( size < 1 ) return NULL;

    /* Allocate the table itself. */
    if( ( hashtable = malloc( sizeof( hashtable_t ) ) ) == NULL ) {
      return NULL;
    }

    /* Allocate pointers to the head nodes. */
    if( ( hashtable->table = malloc( sizeof( node_t * ) * size ) ) == NULL ) {
      return NULL;
    }

    for( i = 0; i < size; i++ ) {
      hashtable->table[i] = NULL;
    }

    hashtable->bins = bins;

    /*if( ( hashtable->locks = malloc( sizeof( pthread_mutex_t * ) * bins) ) == NULL ) {
      return NULL;
    }

    for( i = 0; i < hashtable->bins; i++ ) {
      pthread_mutex_init((pthread_mutex_t *)(&hashtable->locks[i]), NULL);
    }*/

    hashtable->size = size;

    return hashtable;
  }
#+END_SRC

** Insertion
Inserting a new value into the hash table involves hashing the given string into
an array index, then creating a new key-value pair struct for insertion into the
table. In the case of a collision, the node is inserted
*** Hash function
The hash function used is a critical component of the hash table: ensuring a
good distribution of values will keep worst-case access times low by minimizing
the number of linked-list traversals. Here, the standard division method is
used, wherein the string is converted to an unsigned long integer, then is
reduced to an index in the array by getting the value of the resulting number
mod the size of the hash table.
#+BEGIN_SRC c :tangle hash.h
  /* Hash a string for a particular hash table. */
  int ht_hash(unsigned int size, char *key) {
    unsigned long int hashval = 0;
    unsigned int i = 0;

    /* Convert our string to an integer */
    while( hashval < ULONG_MAX && i < strlen( key ) ) {
      hashval = hashval << 8;
      hashval += key[ i ];
      i++;
    }

    return hashval % size;
  }

  unsigned hash_board(unsigned size, uint8_t board[4][4]) {
    unsigned long hashval = 0;
    unsigned i = 0;

    /* Convert our string to an integer */
    while(hashval < ULONG_MAX && i < 16) {
      hashval = hashval << 8;
      hashval += board[i / 4][i % 4];
      i++;
    }

    return hashval % size;
  }
#+END_SRC

*** Inserting the key-value pair
#+BEGIN_SRC c :tangle hash.h
  /* Insert a key-value pair into a hash table. */
  // hashtable_t *hashtable, char *key, char *value
  void ht_set_mut(hashtable_t *hashtable, uint8_t key[4][4], unsigned value) {
    int idx = 0;
    node_t *new_pair = malloc(sizeof(*new_pair));
    node_t *next = NULL;
    node_t *last = NULL;
    pthread_mutex_t *lock;

    idx = hash_board( hashtable->size, key );
    lock = &mutexes[idx % hashtable->bins];

    clone_board(new_pair->key, key);
    new_pair->value = value;

    pthread_mutex_lock(lock);
    next = hashtable->table[idx];
    new_pair->next = next;
    hashtable->table[idx] = new_pair;

    pthread_mutex_unlock(lock);
  }
#+END_SRC

** Retrieval
#+BEGIN_SRC c :tangle hash.h
  /* Retrieve a key-value pair from a hash table. */
  int ht_get_mut(hashtable_t *hashtable, uint8_t key[4][4]) {
    unsigned int idx = 0;
    unsigned i = 0;
    node_t *pair;
    pthread_mutex_t* lock;

    idx = hash_board( hashtable->size, key );

    lock = &mutexes[idx % hashtable->bins];

    pthread_mutex_lock(lock);

    /* Step through the bin, looking for our value. */
    pair = hashtable->table[ idx ];
    while( pair != NULL && brdcmp( key, pair->key ) > 0 ) {
      pair = pair->next;
    }
    pthread_mutex_unlock(lock);

    /* Did we actually find anything? */
    if( pair == NULL || brdcmp( key, pair->key ) != 0 ) {

      return -1;
    } else {
      return pair->value;
    }

    //pthread_mutex_unlock(lock);
  }
#+END_SRC

** Cleanup
#+BEGIN_SRC c :tangle hash.h
  void ht_destroy(hashtable_t *hashtable, unsigned len) {
    for (unsigned i = 0; i < len; i++) {
      node_t *head = hashtable->table[i];
      while (head != NULL && head->next != NULL) {
        node_t *old_head = head;
        head = head->next;
        free(old_head);
      }
    }

    free(hashtable->table);
  }
#+END_SRC
** Testing
*** Test insertion
#+BEGIN_SRC c :tangle hash.h
  void *insert_into_ht_mut(void *arg) {
    ht_arg_t *args = (ht_arg_t *) arg;

    for (unsigned i = args->start; i < args->end; i++) {
      ht_set_mut(args->table, args->kv_pairs[i].key, args->kv_pairs[i].value);
    }

    pthread_barrier_wait(args->barrier);

    pthread_exit((void *) 0);
  }

  void run_insertions_mut(node_t *kv_pairs, hashtable_t *table, unsigned len, unsigned thread_num) {
    pthread_t threads[thread_num];
    pthread_barrier_t barrier;
    ht_arg_t arg[thread_num];

    pthread_barrier_init(&barrier, NULL, thread_num + 1);

    for (unsigned i = 0; i < thread_num; i++) {
      unsigned start = i * len / thread_num;
      unsigned end = (i + 1) * len / thread_num;
      arg[i].table = table;
      arg[i].kv_pairs = kv_pairs;
      arg[i].start = start;
      arg[i].end = end;
      arg[i].barrier = &barrier;
      pthread_create(&threads[i], NULL, *insert_into_ht_mut, (void *)(&arg[i]));
      //printf("Created thread %u\n", i);
    }

    pthread_barrier_wait(&barrier);
    //printf("Success\n");
  }
#+END_SRC

*** Test retrieval
#+BEGIN_SRC c :tangle hash.h
  void *retrieve_from_ht_mut(void *arg) {
    ht_arg_t *args = (ht_arg_t *) arg;
    unsigned nonequal;

    for (unsigned i = args->start; i < args->end; i++) {
      if (args->kv_pairs[i].value != ht_get_mut(args->table, args->kv_pairs[i].key)) {
        nonequal++;
      }
    }

    printf("nonequal: %u\n", nonequal);
    pthread_barrier_wait(args->barrier);

    pthread_exit((void *) 0);
  }

  void run_retrievals_mut(node_t *kv_pairs, hashtable_t *table, unsigned len, unsigned thread_num) {
    pthread_t threads[thread_num];
    pthread_barrier_t barrier;
    ht_arg_t arg[thread_num];

    pthread_barrier_init(&barrier, NULL, thread_num + 1);

    for (unsigned i = 0; i < thread_num; i++) {
      unsigned start = i * len / thread_num;
      unsigned end = (i + 1) * len / thread_num;
      arg[i].table = table;
      arg[i].kv_pairs = kv_pairs;
      arg[i].start = start;
      arg[i].end = end;
      arg[i].barrier = &barrier;
      pthread_create(&threads[i], NULL, *retrieve_from_ht_mut, (void *)(&arg[i]));
      //printf("Created thread %u\n", i);
    }

    pthread_barrier_wait(&barrier);
    //printf("Success\n");
  }
#+END_SRC
* Hash table with read-write locks
** Insertion
Inserting a new value into the hash table involves hashing the given string into
an array index, then creating a new key-value pair struct for insertion into the
table. In the case of a collision, the node is inserted
*** Inserting the key-value pair
#+BEGIN_SRC c :tangle hash.h
  /* Insert a key-value pair into a hash table. */
  // hashtable_t *hashtable, char *key, char *value
  void ht_set_rw(hashtable_t *hashtable, uint8_t key[4][4], unsigned value) {
    int idx = 0;
    node_t *new_pair = malloc(sizeof(*new_pair));
    node_t *next = NULL;
    node_t *last = NULL;
    pthread_rwlock_t *lock;

    idx = hash_board( hashtable->size, key );
    lock = &rwlocks[idx % hashtable->bins];

    clone_board(new_pair->key, key);
    new_pair->value = value;

    pthread_rwlock_wrlock(lock);
    next = hashtable->table[idx];
    new_pair->next = next;
    hashtable->table[idx] = new_pair;

    pthread_rwlock_unlock(lock);
  }
#+END_SRC

** Retrieval
#+BEGIN_SRC c :tangle hash.h
  /* Retrieve a key-value pair from a hash table. */
  int ht_get_rw(hashtable_t *hashtable, uint8_t key[4][4]) {
    unsigned int idx = 0;
    unsigned i = 0;
    node_t *pair;
    pthread_rwlock_t* lock;

    idx = hash_board( hashtable->size, key );

    lock = &rwlocks[idx % hashtable->bins];

    pthread_rwlock_rdlock(lock);

    /* Step through the bin, looking for our value. */
    pair = hashtable->table[ idx ];
    while( pair != NULL && brdcmp( key, pair->key ) > 0 ) {
      pair = pair->next;
    }
    pthread_rwlock_unlock(lock);

    /* Did we actually find anything? */
    if( pair == NULL || brdcmp( key, pair->key ) != 0 ) {

      return -1;
    } else {
      return pair->value;
    }

    //pthread_mutex_unlock(lock);
  }
#+END_SRC

** Testing
*** Test insertion
#+BEGIN_SRC c :tangle hash.h
  void *insert_into_ht_rw(void *arg) {
    ht_arg_t *args = (ht_arg_t *) arg;

    for (unsigned i = args->start; i < args->end; i++) {
      ht_set_rw(args->table, args->kv_pairs[i].key, args->kv_pairs[i].value);
    }

    pthread_barrier_wait(args->barrier);

    pthread_exit((void *) 0);
  }

  void run_insertions_rw(node_t *kv_pairs, hashtable_t *table, unsigned len, unsigned thread_num) {
    pthread_t threads[thread_num];
    pthread_barrier_t barrier;
    ht_arg_t arg[thread_num];

    pthread_barrier_init(&barrier, NULL, thread_num + 1);

    for (unsigned i = 0; i < thread_num; i++) {
      unsigned start = floor(i * len / thread_num);
      unsigned end = (i + 1) * len / thread_num;
      //printf("start: %u, end: %u\n", start, end);
      arg[i].table = table;
      arg[i].kv_pairs = kv_pairs;
      arg[i].start = start;
      arg[i].end = end;
      arg[i].barrier = &barrier;
      pthread_create(&threads[i], NULL, *insert_into_ht_rw, (void *)(&arg[i]));
      //printf("Created thread %u\n", i);
    }

    pthread_barrier_wait(&barrier);
    printf("Success\n");
  }
#+END_SRC

*** Test retrieval
#+BEGIN_SRC c :tangle hash.h
  void *retrieve_from_ht_rw(void *arg) {
    ht_arg_t *args = (ht_arg_t *) arg;
    unsigned nonequal;

    for (unsigned i = args->start; i < args->end; i++) {
      if (args->kv_pairs[i].value != ht_get_rw(args->table, args->kv_pairs[i].key)) {
        nonequal++;
      }
    }

    printf("nonequal: %u\n", nonequal);
    pthread_barrier_wait(args->barrier);

    pthread_exit((void *) 0);
  }

  void run_retrievals_rw(node_t *kv_pairs, hashtable_t *table, unsigned len, unsigned thread_num) {
    pthread_t threads[thread_num];
    pthread_barrier_t barrier;
    ht_arg_t arg[thread_num];

    pthread_barrier_init(&barrier, NULL, thread_num + 1);

    for (unsigned i = 0; i < thread_num; i++) {
      unsigned start = floor(i * len / thread_num);
      unsigned end = (i + 1) * len / thread_num;
      arg[i].table = table;
      arg[i].kv_pairs = kv_pairs;
      arg[i].start = start;
      arg[i].end = end;
      arg[i].barrier = &barrier;
      pthread_create(&threads[i], NULL, *retrieve_from_ht_rw, (void *)(&arg[i]));
      //printf("Created thread %u\n", i);
    }

    pthread_barrier_wait(&barrier);
    printf("Success\n");
  }
#+END_SRC
* 15-puzzle
** Setup
The hash table functions are imported to allow for caching board states.
#+BEGIN_SRC c :tangle assignment2.h
  typedef struct {
    uint8_t board[4][4];
    uint8_t pos[2];
    hashtable_t *table;
    node_t *queue;
    pthread_mutex_t qmut;
    unsigned qlen;
    pthread_mutex_t solved_mut;
    pthread_cond_t solved_cond;
  } puzzle_t;

  typedef struct {
    puzzle_t *puzzle;
    uint8_t solved;
    pthread_barrier_t barrier;
  } puzzle_arg_t;

  #define INIT_BOARD {{ 1,  2,  3,  4}, \
                      { 5,  6,  7,  8}, \
                      { 9, 10, 11, 12}, \
                      {13, 14, 15, 16}}

  void shuffle_board(node_t *board, unsigned swaps);
  void clone_board(uint8_t new_board[4][4], uint8_t board[4][4]);
  void print_board(uint8_t board[4][4]);
  int brdcmp(uint8_t board1[4][4], uint8_t board2[4][4]);
#+END_SRC

** Board utilities
Shuffles the board by playing through the game, to ensure we do not reach an
impossible state.
#+BEGIN_SRC c :tangle puzzle.h
  void shuffle_board(node_t *board, unsigned swaps) {
    uint8_t temp = 0;;
    uint8_t x = 3;
    uint8_t y = 3;

    for (unsigned i = 0; i < swaps; i++) {
      uint8_t dir = rand() % 4;

      // If the move would be invalid, skip.
      if ((dir == 0 && x == 0) ||
          (dir == 1 && x == 3) ||
          (dir == 2 && y == 0) ||
          (dir == 3 && y == 3)) {
        i--;
        continue;
      }

      if (dir == 0) {
        temp = board->key[x][y];
        board->key[x][y] = board->key[x - 1][y];
        board->key[x - 1][y] = temp;
        x = x - 1;
      }

      if (dir == 1) {
        temp = board->key[x][y];
        board->key[x][y] = board->key[x + 1][y];
        board->key[x + 1][y] = temp;
        x = x + 1;
      }

      if (dir == 2) {
        temp = board->key[x][y];
        board->key[x][y] = board->key[x][y - 1];
        board->key[x][y - 1] = temp;
        y = y - 1;
      }

      if (dir == 3) {
        temp = board->key[x][y];
        board->key[x][y] = board->key[x][y + 1];
        board->key[x][y + 1] = temp;
        y = y + 1;
      }
    }

    board->pos[0] = x;
    board->pos[1] = y;
  }

  void clone_board(uint8_t new_board[4][4], uint8_t board[4][4]) {
    for (uint8_t i = 0; i < 4; i++) {
      for (uint8_t j = 0; j < 4; j++) {
        new_board[i][j] = board[i][j];
      }
    }
  }

  void print_board(uint8_t board[4][4]) {
    for (uint8_t i = 0; i < 4; i++) {
      for (uint8_t j = 0; j < 4; j++) {
        printf("%u\t", board[i][j]);
      }
      printf("\n");
    }
  }

  int brdcmp(uint8_t board1[4][4], uint8_t board2[4][4]) {
    int8_t diff;

    for (uint8_t i = 0; i < 4; i++) {
      for (uint8_t j = 0; j < 4; j++) {
        diff = board1[i][j] - board2[i][j];
        if (diff != 0) {
          return diff;
        }
      }
    }

    return 0;
  }

  /*unsigned man_dist(uint8_t board1[4][4], uint8_t board2[4][4]) {
    unsigned sum = 0;

    for (uint8_t i = 0; i < 4; i++) {
      for (uint8_t j = 0; j < 4; j++) {
        sum += abs(board1[i][j] - board2[i][j]);
      }
    }

    return sum;
  }*/

  unsigned man_error(uint8_t board[4][4]) {
    unsigned sum = 0;

    for (uint8_t i = 0; i < 4; i++) {
      for (uint8_t j = 0; j < 4; j++) {
        sum += abs((board[i][j] - 1) / 4 - i) + abs((board[i][j] - 1) % 4 - j);
      }
    }

    return sum;
  }
#+END_SRC

** Make moves
#+BEGIN_SRC c :tangle puzzle.h
  void puzzle_step(puzzle_t *puzzle, node_t *board, uint8_t *solved) {
    uint8_t board_tmp[4][4][4] = { 0 };
    uint8_t temp;
    node_t queue_item;
    uint8_t x = board->pos[0];
    uint8_t y = board->pos[1];

    uint8_t pos[4][2] = {{x - 1, y},
                         {x + 1, y},
                         {x, y - 1},
                         {x, y + 1}};

    //printf("Initial board:\n");
    //print_board(board->key);

    if (x > 0) {
      clone_board(board_tmp[0], board->key);

      temp = board_tmp[0][x][y];
      board_tmp[0][x][y] = board_tmp[0][x - 1][y];
      board_tmp[0][x - 1][y] = temp;
    }

    if (x < 3) {
      clone_board(board_tmp[1], board->key);

      temp = board_tmp[1][x][y];
      board_tmp[1][x][y] = board_tmp[1][x + 1][y];
      board_tmp[1][x + 1][y] = temp;
    }

    if (y > 0) {
      clone_board(board_tmp[2], board->key);

      temp = board_tmp[2][x][y];
      board_tmp[2][x][y] = board_tmp[2][x][y - 1];
      board_tmp[2][x][y - 1] = temp;
    }

    if (y < 3) {
      clone_board(board_tmp[3], board->key);

      temp = board_tmp[3][x][y];
      board_tmp[3][x][y] = board_tmp[3][x][y + 1];
      board_tmp[3][x][y + 1] = temp;
    }

    for (uint8_t i = 0; i < 4; i++) {
      if (board_tmp[i][0][0] == 0) { // There is no 0 tile.
        continue;
      }

      if (ht_get_mut(puzzle->table, board_tmp[i]) == -1) {
        unsigned error = man_error(board_tmp[i]);
        //printf("i: %u\terror: %u\n", i, error);
        //print_board(board_tmp[i]);

        if (error == 0) {
          //printf("qlen: %u !!!!!!!!solved!!!!!!!\n", puzzle->qlen);
          print_board(board_tmp[i]);
          *solved = 1;
          pthread_cond_signal(&puzzle->solved_cond);
          return;
        }
        //printf("error isn't zero\n");

        ht_set_mut(puzzle->table, board_tmp[i], error);
        //printf("set hash table value\n");

        clone_board(queue_item.key, board_tmp[i]);
        queue_item.value = error;
        queue_item.pos[0] = pos[i][0];
        queue_item.pos[1] = pos[i][1];

        pthread_mutex_lock(&puzzle->qmut);
        insert(puzzle->queue, &puzzle->qlen, 4, queue_item);
        pthread_mutex_unlock(&puzzle->qmut);
      } else {
        //printf("Already in table.\n");
      }
    }
    //printf("\n");
  }
#+END_SRC

** Solve puzzle
#+BEGIN_SRC c :tangle puzzle.h
  void *puzzle_runner(void* arg) {
    puzzle_arg_t *args = (puzzle_arg_t*) arg;
    puzzle_t *puzzle = args->puzzle;

    while (args->solved == 0 && puzzle->qlen != 0) {
      //printf("Made it to while loop\n");
      pthread_mutex_lock(&puzzle->qmut);
      node_t board = extract_min(puzzle->queue, &puzzle->qlen, 4);
      pthread_mutex_unlock(&puzzle->qmut);
      //printf("extracted min\n");
      //printf("qlen: %u\t error: %u\n", puzzle->qlen, board.value);
      /*if (puzzle->qlen % 1000 == 0) {
        printf("qlen: %u\t error: %u\n", puzzle->qlen, board.value);
      }*/
      /*if (board.value < 10) {
        printf("error: %u\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n", board.value);
      }*/
      /*if (puzzle->qlen > 100000) {
        puzzle->qlen = 50000;
      }*/

      if (puzzle->qlen > 10000000) {
        printf("Aborting.\n");
        pthread_cond_signal(&puzzle->solved_cond);
        break;
      }

      puzzle_step(puzzle, &board, &args->solved);
    }

    if (puzzle->qlen == 0) {
      printf("Ran out of queued items.\n");
    } else if (args->solved == 1) {
      printf("puzzle solved.\n");
      printf("qlen: %u\n", puzzle->qlen);
    } else {
      printf("something went terribly wrong.\n");
    }

    pthread_barrier_wait(&args->barrier);

    pthread_exit((void*) 0);
  }

  void solve_puzzle(puzzle_t *puzzle, uint8_t thread_num) {
    pthread_t threads[thread_num];

    puzzle_arg_t puzzle_arg = {puzzle, 0};

    pthread_barrier_init(&puzzle_arg.barrier, NULL, thread_num + 1);

    node_t board;
    clone_board(board.key, puzzle->board);
    board.pos[0] = puzzle->pos[0];
    board.pos[1] = puzzle->pos[1];

    puzzle_step(puzzle, &board, &puzzle_arg.solved);
    //printf("qlen: %u\n", puzzle->qlen);

    for (uint8_t i; i < thread_num; i++) {
      printf("Starting thread: %u\n", i);
      pthread_create(&threads[i], NULL, *puzzle_runner, (void *)(&puzzle_arg));
    }

    pthread_mutex_lock(&puzzle->solved_mut);
    pthread_cond_wait(&puzzle->solved_cond, &puzzle->solved_mut);

    for (uint8_t i; i < thread_num; i++) {
      printf("Stopping thread: %u\n", i);
      pthread_cancel(threads[i]);
    }

    pthread_mutex_unlock(&puzzle->solved_mut);
    //pthread_barrier_wait(&puzzle_arg.barrier);

    printf("Puzzle solved.\n");
  }
#+END_SRC
* Testing program
The first portion of the =assignment2.c= code involves importing the necessary
headers and creating the appropriate utility functions.

#+BEGIN_SRC c :tangle assignment2.c
  /*
   * assignment2.c
   * Author: Evan Bradley
   */

  #include <stdio.h>
  #include <math.h>
  #include <sys/timeb.h>
  #include "barriers.h"
  #include "assignment2.h"
  #include "hash.h"
  #include "puzzle.h"
#+END_SRC

A function from the course Moodle page is used for timing.
#+BEGIN_SRC c :tangle assignment2.c
  /*
   ,* The following function is taken from matvec.c on the Moodle coursepage.
   ,*/
  double read_timer() {
      struct timeb tm;
      ftime(&tm);
      return (double) tm.time + (double) tm.millitm / 1000.0;
  }

  int main(int argc, char **argv) {
    srand(time(NULL));

    double time_puzzle, time_ht_mut_ins, time_ht_mut_ret,
    time_ht_rw_ins, time_ht_rw_ret,
    time_board_gen;

    const unsigned thread_count[MAX_THREADS] = {1, 2, 4, 8};
    const unsigned mutex_count[MUTEX_COUNTS] = {10, 25, 50, 100};
    const unsigned rwlock_count[RWLOCK_COUNTS] = {10, 25, 50, 100};

    for (unsigned i = 0; i < MAX_MUTEXES; i++) {
        pthread_mutex_init(&mutexes[i], NULL);
    }

    for (unsigned i = 0; i < MAX_MUTEXES; i++) {
        pthread_rwlock_init(&rwlocks[i], NULL);
    }

    //hashtable_t *hashtable = ht_create(HT_LEN, MAX_MUTEXES / 10); //65536

    node_t *board_arr = malloc(sizeof(node_t) * NUM_BOARDS);
    uint8_t init_board[4][4] = INIT_BOARD;

    time_board_gen = read_timer();
    for (unsigned i = 0; i < NUM_BOARDS; i++) {
      clone_board(board_arr[i].key, init_board);
      shuffle_board(&board_arr[i], pow(2, 10));
      board_arr[i].value = man_error(board_arr[i].key);
    }
    time_board_gen = (read_timer() - time_board_gen);
    printf("Created %u boards in %.0f s.\n", NUM_BOARDS, time_board_gen);

    /*hashtable_t *hashtable = ht_create(HT_LEN, MAX_MUTEXES); //65536
    run_insertions_rw(board_arr, hashtable, NUM_BOARDS, 2);
    run_retrievals_rw(board_arr, hashtable, NUM_BOARDS, 2);
    printf("finish\n");
    ht_destroy(hashtable, HT_LEN);*/

    printf("Threads\tIns Time\tRet Time\n");
    for (unsigned i = 0; i < MAX_THREADS; i++) {
      hashtable_t *hashtable = ht_create(HT_LEN, (i + 1) * MAX_MUTEXES / 10); //65536

      time_ht_mut_ins = read_timer();
      run_insertions_mut(board_arr, hashtable, NUM_BOARDS, thread_count[i]);
      time_ht_mut_ins = (read_timer() - time_ht_mut_ins);

      time_ht_mut_ret = read_timer();
      run_retrievals_mut(board_arr, hashtable, NUM_BOARDS, thread_count[i]);
      time_ht_mut_ret = (read_timer() - time_ht_mut_ret);

      printf("%u\t%.0f ms\t\t%.0f ms\n", thread_count[i], time_ht_mut_ins * 1.0e3, time_ht_mut_ret * 1.0e3);
      ht_destroy(hashtable, HT_LEN);
    }

    printf("Mutexes\tTime\n");
    for (unsigned i = 0; i < MUTEX_COUNTS; i++) {
      hashtable_t *hashtable = ht_create(HT_LEN, mutex_count[i]); //65536

      time_ht_mut_ins = read_timer();
      run_insertions_mut(board_arr, hashtable, NUM_BOARDS, 4);
      time_ht_mut_ins = (read_timer() - time_ht_mut_ins);

      time_ht_mut_ret = read_timer();
      run_retrievals_mut(board_arr, hashtable, NUM_BOARDS, 4);
      time_ht_mut_ret = (read_timer() - time_ht_mut_ret);

      printf("%u\t%.0f ms\t\t%.0f ms\n", mutex_count[i], time_ht_mut_ins * 1.0e3, time_ht_mut_ret * 1.0e3);

      ht_destroy(hashtable, HT_LEN);
    }

    printf("Threads\tIns Time\tRet Time\n");
    for (unsigned i = 0; i < MAX_THREADS; i++) {
      hashtable_t *hashtable = ht_create(HT_LEN, (i + 1) * MAX_MUTEXES / 10); //65536

      time_ht_rw_ins = read_timer();
      run_insertions_rw(board_arr, hashtable, NUM_BOARDS, thread_count[i]);
      time_ht_rw_ins = (read_timer() - time_ht_rw_ins);

      time_ht_rw_ret = read_timer();
      run_retrievals_rw(board_arr, hashtable, NUM_BOARDS, thread_count[i]);
      time_ht_rw_ret = (read_timer() - time_ht_rw_ret);

      printf("%u\t%.0f ms\t\t%.0f ms\n", thread_count[i], time_ht_rw_ins * 1.0e3, time_ht_rw_ret * 1.0e3);
      ht_destroy(hashtable, HT_LEN);
    }

    printf("Rwlocks\tTime\n");
    for (unsigned i = 0; i < RWLOCK_COUNTS; i++) {
      hashtable_t *hashtable = ht_create(HT_LEN, rwlock_count[i]); //65536

      time_ht_rw_ins = read_timer();
      run_insertions_rw(board_arr, hashtable, NUM_BOARDS, 4);
      time_ht_rw_ins = (read_timer() - time_ht_rw_ins);

      time_ht_rw_ret = read_timer();
      run_retrievals_rw(board_arr, hashtable, NUM_BOARDS, 4);
      time_ht_rw_ret = (read_timer() - time_ht_rw_ret);

      printf("%u\t%.0f ms\t\t%.0f ms\n", rwlock_count[i], time_ht_rw_ins * 1.0e3, time_ht_rw_ret * 1.0e3);

      ht_destroy(hashtable, HT_LEN);
    }


    //printf("Time:\t%.0f ms\n", time_ht_mut * 1.0e3);

    //ht_destroy(hashtable, HT_LEN);
    free(board_arr);

    /*unsigned HT_LEN = 10000;

    hashtable_t *hashtable = ht_create(HT_LEN, MAX_MUTEXES); //65536
    node_t *heap = malloc(sizeof(node_t) * 10000000);

    puzzle_t puzzle = {INIT_BOARD, {0, 0}, hashtable, heap, 0};*/

    //shuffle_board(&puzzle, pow(2, 24));

    /* 5 shuffles; qlen: 60764 */
    /*uint8_t shuffled_board[4][4] = {{ 11,  2, 13, 16},
                                    {  5,  4,  8, 15},
                                    {  1,  6,  3,  7},
                                    {  9, 10, 12, 14}};*/

    /* 5 shuffles; qlen: 60764 */
    /*uint8_t shuffled_board[4][4] = {{  6,  9,  4,  8},
                                    {  5, 15, 11, 14},
                                    { 16,  2,  1, 13},
                                    {  3, 10, 12,  7}};*/

    /*uint8_t pos[2] = {0, 3};
    clone_board(puzzle.board, shuffled_board);
    puzzle.pos[0] = pos[0];
    puzzle.pos[1] = pos[1];
    printf("Shuffled board: \n");
    print_board(puzzle.board);
    printf("Initial error: %u\n", man_error(puzzle.board));

    pthread_mutex_init(&puzzle.qmut, NULL);
    pthread_mutex_init(&puzzle.solved_mut, NULL);
    pthread_cond_init(&puzzle.solved_cond, NULL);

    time_puzzle = read_timer();
    solve_puzzle(&puzzle, 1);
    time_puzzle = (read_timer() - time_puzzle);
    //printf("%u\n", abs((16 - 1) / 4 - 0) + abs((16 - 1) % 4 - 0));

    printf("Time:\t%.0f ms\n", time_puzzle * 1.0e3);*/


    /*for (unsigned i = 0; i < MAX_THREADS; i++) {
      hashtable_t *hashtable = ht_create(HT_LEN, MAX_MUTEXES); //65536
      node_t *heap = malloc(sizeof(node_t) * 10000000);

      puzzle_t puzzle = {INIT_BOARD, {0, 0}, hashtable, heap, 0};

      // 5 shuffles; qlen: 60764 
      uint8_t shuffled_board[4][4] = {{ 11,  2, 13, 16},
                                      {  5,  4,  8, 15},
                                      {  1,  6,  3,  7},
                                      {  9, 10, 12, 14}};
      uint8_t pos[2] = {0, 3};

      clone_board(puzzle.board, shuffled_board);
      puzzle.pos[0] = pos[0];
      puzzle.pos[1] = pos[1];
      printf("Shuffled board: \n");
      print_board(puzzle.board);
      printf("Initial error: %u\n", man_error(puzzle.board));

      pthread_mutex_init(&puzzle.qmut, NULL);
      pthread_mutex_init(&puzzle.solved_mut, NULL);
      pthread_cond_init(&puzzle.solved_cond, NULL);

      time_puzzle = read_timer();
      solve_puzzle(&puzzle, thread_count[i]);
      time_puzzle = (read_timer() - time_puzzle);

      printf("%u\t%.0f ms\n", thread_count[i], time_puzzle * 1.0e3);
      ht_destroy(hashtable, HT_LEN);
    }*/

    /*ht_destroy(hashtable, HT_LEN);
    free(heap);*/

    return 0;
  }
#+END_SRC
